from "generics/resistors.ato" import Resistor
from "generics/capacitors.ato" import Capacitor
from "generics/interfaces.ato" import USB2, Power, UART

from "parts/screw_terminals/all_screw_terminals.ato" import ScrewTerminal_10P_2_54mm
from "parts/mounting_holes.ato" import MountingHole_M3
from "parts/SP0503BAHTG.ato" import SP0503BAHTG
from "parts/UMH3N.ato" import UMH3N


component _CP2102N_A02_GQFN24R:
    """
    This is the CP2102N USB to serial IC from Silicon Labs.
    In comparison to the CP2102, the CP2102N has an increased maximum data rate of 3Mbps (vs 2Mbps) and a few additional features.
    """

    # component CP2102N-A02-GQFN24R
    footprint = "QFN-24_L4.0-W4.0-P0.50-TL-EP2.6"
    datasheet = "https://wmsc.lcsc.com/wmsc/upload/file/pdf/v2/lcsc/2304140030_SKYWORKS-SILICON-LABS-CP2102N-A02-GQFN24R_C969151.pdf"
    lcsc_id = "C969151"
    mpn = "C969151"

    # pins
    signal RI_CLK ~ pin 1           # Digital Input. Ring Indicator control input (active low). Digital Output. Clock output.
    signal GND ~ pin 2              # Ground
    signal DPLUS ~ pin 3            # USB Data Positive
    signal DMINUS ~ pin 4           # USB Data Negative
    signal VIO ~ pin 5              # I/O Supply Power Input
    signal VDD ~ pin 6              # Supply Power Input / 5V Regulator Output
    signal VREGIN ~ pin 7           # 5V Regulator Input
    signal VBUS ~ pin 8             # Digital Input. VBUS Sense Input. This pin should be connected to the VBUS signal of a USB network. A 5 V signal on this pin indicates a USB network connection.
    signal RSTb ~ pin 9             # Active-low Rese
    signal GPIO_3_WAKEUP ~ pin 11   # Digital Input/Output. General Purpose I/O. Digital Input. Remote USB wakeup interrupt input.
    signal GPIO_2_RS485 ~ pin 12    # Digital Input/Output. General Purpose I/O. Digital Output. RS485 control signal.
    signal GPIO_1_RXT ~ pin 13      # Digital Input/Output. General Purpose I/O. Digital Output. Receive LED toggle.
    signal GPIO_0_TXT ~ pin 14      # Digital Input/Output. General Purpose I/O. Digital Output. Transmit LED toggle.
    signal SUSPENDb ~ pin 15        # Digital Output. This pin is driven low when the device enters the USB suspend state.
    signal SUSPEND ~ pin 17         # Digital Output. This pin is driven high when the device enters the USB suspend state.
    signal CTS ~ pin 18             # Digital Input. Clear To Send control input (active low).
    signal RTS ~ pin 19             # Digital Output. Ready To Send control output (active low).
    signal request_to_send ~ RTS
    signal RXD ~ pin 20             # Digital Input. Asynchronous data input (UART Receive).
    signal TXD ~ pin 21             # Digital Output. Asynchronous data output (UART Transmit).
    signal DSR ~ pin 22             # Digital Input. Data Set Ready control input (active low).
    signal data_set_ready ~ DSR
    signal DTR ~ pin 23             # Digital Output. Data Terminal Ready control output (active low).
    signal data_terminal_ready ~ DTR
    signal DCD ~ pin 24             # Digital Input. Data Carrier Detect control input (active low).
    signal data_carrier_detect ~ DCD
    GND ~ pin 25                    # Ground

    # Add USB2
    usb = new USB2
    usb.dp ~ DPLUS
    usb.dm ~ DMINUS
    usb.gnd ~ GND

    # Add UART
    uart = new UART
    uart.tx ~ TXD
    uart.rx ~ RXD
    uart.gnd ~ GND

    # Add 3.3V power (3.3V)
    power_3_3v = new Power
    power_3_3v.vcc ~ VDD
    power_3_3v.vcc ~ VIO
    power_3_3v.gnd ~ GND
    power_3_3v.voltage = 0V
    power_3_3v.available_current = 0mA
    power_3_3v.max_current_draw = 13.7mA

    # Add VBUS power (5V)
    power_vbus = new Power
    power_vbus.gnd ~ GND
    power_vbus.voltage = 0V

    # Add specs
    VDD.voltage = power_3_3v.voltage
    VIO.voltage = power_3_3v.voltage
    VREGIN.voltage = 0V
    VBUS.voltage = power_vbus.voltage
    DPLUS.voltage = 0V to 3.3V
    DMINUS.voltage = 0V to 3.3V
    CTS.voltage = 0V to 3.3V
    RTS.voltage = 0V to 3.3V
    request_to_send.voltage = RTS.voltage
    RXD.voltage = 0V to 3.3V
    TXD.voltage = 0V to 3.3V
    DSR.voltage = 0V to 3.3V
    DTR.voltage = 0V to 3.3V
    data_terminal_ready.voltage = DTR.voltage
    DCD.voltage = 0V to 3.3V

    # check specs
    assert VDD.voltage within 3.0V to 3.6V
    assert VIO.voltage within 1.71V to 3.6V
    assert VREGIN.voltage within 3.0 to 5.8V
    assert VBUS.voltage within 0V to 5.8V
    assert DPLUS.voltage within 0V to 3.3V
    assert DMINUS.voltage within 0V to 3.3V
    assert CTS.voltage within 0V to 3.3V
    assert RTS.voltage within 0V to 3.3V
    assert request_to_send.voltage within 0V to 3.3V
    assert RXD.voltage within 0V to 3.3V
    assert TXD.voltage within 0V to 3.3V
    assert DSR.voltage within 0V to 3.3V
    assert DTR.voltage within 0V to 3.3V
    assert data_terminal_ready.voltage within 0V to 3.3V
    assert DCD.voltage within 0V to 3.3V
    assert power_3_3v.available_current >= power_3_3v.max_current_draw



module CP2102N from _CP2102N_A02_GQFN24R:
    """
    This is the CP2102N USB to serial IC from Silicon Labs.
    In comparison to the CP2102, the CP2102N has an increased maximum data rate of 3Mbps (vs 2Mbps) and a few additional features.

    Included are also the required capacitors, resistors, ESD protection for the D+ and D- lines, and an auto-reset dual transistor.
    """
    signal MCU_IO0 # Connect this pin to the GPIO 0 pin of the ESP32
    signal MCU_EN # Connect this pin to the EN pin of the ESP32

    # Add capacitors for the VREGIN and VDD pins
    small_cap = new Capacitor
    small_cap.value = 0.1uF +/- 10%
    small_cap.package = "0402"
    small_cap.power ~ power_3_3v

    large_cap = new Capacitor
    large_cap.value = 10uF +/- 20%
    large_cap.package = "0603"
    large_cap.power ~ power_3_3v

    # Add pull-up resistor for the RSTb pin
    pull_up_resistor = new Resistor
    pull_up_resistor.value = 1kohm +/- 1%
    pull_up_resistor.package = "0402"
    pull_up_resistor.p1 ~ RSTb
    pull_up_resistor.p2 ~ VIO

    # Add ESD protection for the D+ and D- lines
    # (ESD protection for VBUS not included to make it make it easier compatible with USB PD systems where ESD protection is done via the USB PD controller)
    esd_protection_diode = new SP0503BAHTG
    esd_protection_diode.gnd ~ power_3_3v.gnd
    esd_protection_diode.input2 ~ DPLUS
    esd_protection_diode.input3 ~ DMINUS

    esd_protection_diode.input2.voltage = DPLUS.voltage
    esd_protection_diode.input3.voltage = DMINUS.voltage

    # Add auto-reset dual transistor
    auto_reset_transistor = new UMH3N
    auto_reset_transistor.emitter_1 ~ request_to_send
    auto_reset_transistor.base_1 ~ data_terminal_ready
    auto_reset_transistor.collector_1 ~ MCU_EN
    auto_reset_transistor.emitter_2 ~ data_terminal_ready
    auto_reset_transistor.base_2 ~ request_to_send
    auto_reset_transistor.collector_2 ~ MCU_IO0

    auto_reset_transistor.emitter_1.voltage = request_to_send.voltage
    auto_reset_transistor.base_1.voltage = data_terminal_ready.voltage
    auto_reset_transistor.emitter_2.voltage = data_terminal_ready.voltage
    auto_reset_transistor.base_2.voltage = request_to_send.voltage

    # Auto program:
    # DTR   RTS -->	EN 	IO0
    # 1	    1		1	1
    # 0	    0		1	1
    # 1	    0		0	1
    # 0	    1		1	0


module CP2102N_powered_by_3_3V from CP2102N:
    """
    This is the CP2102N USB to serial IC from Silicon Labs.
    It is powered by an external 3.3V power source and therefore does not use the integrated voltage regulator.
    """
    # Does not use the internal voltage regulator
    power_3_3v.vcc ~ VREGIN
    VREGIN.voltage = power_3_3v.voltage


module CP2102N_powered_by_USB from CP2102N:
    """
    This is the CP2102N USB to serial IC from Silicon Labs.
    It is powered by the USB bus voltage.
    """
    # Uses the internal voltage regulator
    power_vbus.vcc ~ VREGIN
    VREGIN.voltage = power_vbus.voltage
    power_3_3v.available_current = 100mA


module CP2102N_dev_module:
    usb_to_serial_ic = new CP2102N

    # Add example power specs
    usb_to_serial_ic.power_3_3v.voltage = 3.3V
    usb_to_serial_ic.power_3_3v.available_current = 1A
    usb_to_serial_ic.VREGIN.voltage = 3.3V

    # add screw terminal to connect to other parts
    screw_terminal_left = new ScrewTerminal_10P_2_54mm
    screw_terminal_left._1 ~ usb_to_serial_ic.power_3_3v.vcc
    screw_terminal_left._2 ~ usb_to_serial_ic.power_3_3v.gnd
    screw_terminal_left._3 ~ usb_to_serial_ic.VREGIN
    screw_terminal_left._4 ~ usb_to_serial_ic.VBUS
    screw_terminal_left._5 ~ usb_to_serial_ic.RXD
    screw_terminal_left._6 ~ usb_to_serial_ic.TXD
    screw_terminal_left._7 ~ usb_to_serial_ic.DPLUS
    screw_terminal_left._8 ~ usb_to_serial_ic.DMINUS
    screw_terminal_left._9 ~ usb_to_serial_ic.MCU_IO0
    screw_terminal_left._10 ~ usb_to_serial_ic.MCU_EN

    screw_terminal_right = new ScrewTerminal_10P_2_54mm
    screw_terminal_right._1 ~ usb_to_serial_ic.GPIO_0_TXT
    screw_terminal_right._2 ~ usb_to_serial_ic.GPIO_1_RXT
    screw_terminal_right._3 ~ usb_to_serial_ic.GPIO_2_RS485
    screw_terminal_right._4 ~ usb_to_serial_ic.GPIO_3_WAKEUP
    screw_terminal_right._5 ~ usb_to_serial_ic.SUSPEND
    screw_terminal_right._6 ~ usb_to_serial_ic.CTS
    screw_terminal_right._7 ~ usb_to_serial_ic.RTS
    screw_terminal_right._8 ~ usb_to_serial_ic.DSR
    screw_terminal_right._9 ~ usb_to_serial_ic.DTR
    screw_terminal_right._10 ~ usb_to_serial_ic.DCD

    # add M3 mounting holes
    mounting_hole_1 = new MountingHole_M3
    mounting_hole_2 = new MountingHole_M3
    mounting_hole_3 = new MountingHole_M3
    mounting_hole_4 = new MountingHole_M3